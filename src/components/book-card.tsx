// src/components/book-card.tsx
import Link from 'next/link';
import Image from 'next/image';
import { BookText } from 'lucide-react';

// Define the Book interface - MUST match the structure generated by the script
export interface Book {
  id: string; // Unique ID for React keys (e.g., base filename)
  title: string;
  author: string;
  year?: number;
  coverImageUrl?: string; // Optional local cover image URL (e.g., /covers/...)
  pdfUrl: string;         // The full external URL to the PDF (e.g., Mega link)
}

interface BookCardProps {
  book: Book;
}

export function BookCard({ book }: BookCardProps) {
  // --- Defensive Check ---
  // If pdfUrl is missing or empty, don't render the card.
  // This prevents the Link component from receiving an undefined href.
  if (!book || !book.pdfUrl) {
    // Log a warning during development to help debug if needed
    if (process.env.NODE_ENV === 'development') {
      console.warn(`BookCard received book without valid pdfUrl:`, book);
    }
    return null; // Render nothing
  }
  // --- End Defensive Check ---

  // Use the pdfUrl directly from the book data for the link
  const pdfLinkHref = book.pdfUrl;

  return (
    // Use the external pdfLinkHref for the Link component
    // target="_blank" is essential for external links, especially PDFs
    <Link href={pdfLinkHref} target="_blank" rel="noopener noreferrer" className="group block">
      <div className="border rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 bg-card text-card-foreground overflow-hidden flex flex-col h-full">

        {/* Image Container */}
        <div className="relative w-full aspect-square bg-muted overflow-hidden">
          {book.coverImageUrl ? (
            <Image
              src={book.coverImageUrl} // This remains the local path to the cover
              alt={`Cover for ${book.title}`}
              fill
              sizes="(max-width: 640px) 50vw, (max-width: 768px) 33vw, (max-width: 1024px) 25vw, 20vw"
              className="object-cover transition-transform duration-300 group-hover:scale-105"
              priority={false}
            />
          ) : (
            // Fallback content if no image URL
            <div className="absolute inset-0 flex items-center justify-center text-muted-foreground">
               <BookText className="h-1/3 w-1/3 opacity-50" />
            </div>
          )}
        </div>

        {/* Text Content Area */}
        <div className="p-3 flex flex-col flex-grow justify-between">
          {/* Top section for Title and Author */}
          <div>
            <h3 className="font-semibold text-sm leading-tight mb-1 line-clamp-3 group-hover:line-clamp-none">
              {book.title}
            </h3>
            <p className="text-xs text-muted-foreground truncate">
              {book.author}
            </p>
          </div>

          {/* Bottom section for Year (optional) */}
          {book.year && (
            <p className="text-xs text-muted-foreground mt-auto text-right pt-1">
              {book.year}
            </p>
          )}
        </div>

      </div>
    </Link>
  );
}
